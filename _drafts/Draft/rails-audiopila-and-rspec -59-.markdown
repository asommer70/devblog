# Audio Pila! RSpec

## Testing with RSpec

Maybe it’s because the main way I learned Rails development (besides jumping in and developing a bunch of web apps with it) was going through the Treehouse [Ruby/Ruby on Rails](https://teamtreehouse.com/tracks/rails-development) courses.  In those lessons [Jason Seifer](https://twitter.com/jseifer?lang=en) uses the [RSpec](http://rspec.info/) testing framework and it really started to make sense for me.

Not just writing tests with RSpec, but the whole TDD (Test Driven Development) thing came into focus and I could actually understand it.  At least I think I could…

So to make developing [Audio Pila!](https://github.com/asommer70/audiopila-rails) a little quicker I’m going to migrate the testing from Test::Unit to RSpec.  It’ll be fun!

## Installing and Configuring RSpec

I’ll be using the latest documentation for Rspec to get things setup.  The first step is to add **rspec** to the **Gemfile** inside the **:development, :testing do** block add:

```
gem 'rspec-rails', '~> 3.0'
```

And install the new gem:

```
bundle install
```

Then initialize the **spec** directory:

```
rails generate rspec:install
```

To make executing RSpec tests easier I like to install the **binstubs** (this isn’t strictly necessary if you don’t mind executing tests with ```bundle exec respect``` each time):

```
bundle binstubs rspec-core
```

You can now execute tests with:

```
bin/rspec spec/
```

## Additional Testing Gems

Now that we have straight up RSpec installed and configured we can add some additional gems to make our tests, especially feature tests, outstanding and easy to understand.

First add these entires to the **:development, :test do** block:

```
  gem 'capybara'
  gem 'capybara-email'
  gem 'shoulda-matchers', '~> 2.8.0'
  gem 'poltergeist'
  gem 'phantomjs', :require => 'phantomjs/poltergeist'
  gem 'selenium-webdriver'
```

The [Capybara](http://jnicklas.github.io/capybara/) gem is great for testing as a browser sees the page. You can find elements via CSS and XPATH queries which is awesome.  The **capybara-email** gem isn’t necessary if you’re not going to test emails generated by Rails, but who knows maybe we’ll send some email notifications in our little app.

The [poltergeist](https://github.com/teampoltergeist/poltergeist), [phantomjs](http://phantomjs.org/), and [selenium-webdriver](http://www.seleniumhq.org/projects/webdriver/) gems allow you to test using an actual browser.  The Selenium Webdriver project is especially awesome because it can take over the browser, mouse, etc and perform actions for you.  Really beats doing all that pointing, clicking, typing, etc all by yourself.

With all the supporting gems installed add some configuration in **spec/rails_helper.rb** add the following inside the **do |config|** block:

```
  config.include Capybara::DSL, type: :feature

  Capybara.register_driver :poltergeist do |app|
    Capybara::Poltergeist::Driver.new(app, :phantomjs => Phantomjs.path, :js_errors => false)
  end

  if config.filter_manager.inclusions[:visual]
    Capybara.javascript_driver = :selenium
    config.filter_manager.inclusions.delete(:visual)
  else
    Capybara.javascript_driver = :poltergeist
  end
```

This code sets Capybara to be used for **feature** tests.  The Poltergeist driver is registered and then the if statement decides to use either Poltergeist for Selenium for running the test.  This is based on using RSpec tags with the **-t** option when executing the tests.

This is great because Poltergeist doesn’t show a GUI, but sometimes it’s very useful to watch the test being performed so when you need to you can execute the test with the **-t visual** option.

Hopefully it’ll make more sense when we run some actual tests.

## Migrating Tests

